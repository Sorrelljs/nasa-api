{"version":3,"sources":["Navbar.js","BlogList.js","useFetch.js","Home.js","NotFound.js","App.js","index.js"],"names":["Navbar","className","to","BlogList","data","title","useState","isActive","setActive","console","log","src","url","alt","date","description","onClick","useFetch","setData","isLoading","setIsLoading","error","setError","useEffect","abortCont","AbortController","setTimeout","fetch","signal","then","res","ok","Error","json","catch","err","name","message","abort","Home","NotFound","App","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAgBeA,EAZA,WACX,OACI,sBAAKC,UAAU,SAAf,UACI,+CACA,qBAAKA,UAAU,QAAf,SAEI,cAAC,IAAD,CAAMC,GAAI,IAAV,wB,OCmBDC,EA1BE,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MAEvB,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAiBC,EAAjB,KAQE,OAFAC,QAAQC,IAAIN,GAGV,qCACI,6BAAKC,IACP,qBAAKJ,UAAU,YAAf,SACE,sBAAKA,UAAU,eAAf,UACE,4BAAIG,EAAKC,QACT,qBAAKM,IAAKP,EAAKQ,IAAKC,IAAKT,EAAKC,QAC9B,gCAAQD,EAAKU,OACb,4BAAIV,EAAKW,cACP,qBAAKC,QAdH,WACZR,GAAWD,IAaoBN,UAAS,gBAAWM,EAAW,YAAc,iBCkDjEU,EApEE,SAACL,GAKd,MAAwBN,mBAAS,MAAjC,mBAAOF,EAAP,KAAac,EAAb,KAEI,EAAkCZ,oBAAS,GAA3C,mBAAOa,EAAP,KAAkBC,EAAlB,KAEA,EAA0Bd,mBAAS,MAAnC,mBAAOe,EAAP,KAAcC,EAAd,KAwDJ,OApDIC,qBAAU,WAKV,IAAMC,EAAY,IAAIC,gBA2CtB,OAvCAC,YAAW,WAIXC,MAAMf,EAAK,CAAEgB,OAAQJ,EAAUI,SAE1BC,MAAK,SAAAC,GAEF,IAAIA,EAAIC,GACJ,MAAMC,MAAO,2CAGjB,OAAOF,EAAIG,UAGVJ,MAAK,SAACzB,GAEHgB,GAAa,GAEbF,EAAQd,GAERkB,EAAS,SAEhBY,OAAM,SAACC,GAEY,eAAbA,EAAIC,KACH3B,QAAQC,IAAI,kBAGZU,GAAa,GAEbE,EAASa,EAAIE,eAKtB,KAGI,WAAOb,EAAUc,WAEzB,CAAC1B,IAEG,CAACR,OAAMe,YAAWE,UC5CdkB,EAtBF,WAET,IACJ,EAAiCtB,EAAS,wFAAnCb,EAAP,EAAOA,KAAMe,EAAb,EAAaA,UAAWE,EAAxB,EAAwBA,MAGpB,OACI,sBAAKpB,UAAU,OAAf,UAEKoB,GAAS,oCAAQA,EAAR,OAETF,GAAa,6CAEbf,GAAQ,cAAC,EAAD,CAAUA,KAAMA,EAAMC,MAAM,uB,OCLlCmC,EATE,WACb,OACI,gCACI,gDACA,cAAC,IAAD,CAAMtC,GAAG,IAAT,uCC0CGuC,MAxCf,WAGE,OACE,cAAC,IAAD,UACE,sBAAKxC,UAAU,MAAf,UACI,cAAC,EAAD,IACA,qBAAKA,UAAU,UAAf,SACE,eAAC,IAAD,WAEE,cAAC,IAAD,CAAOyC,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAGF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,EAAD,iBClBhBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.738b3b4d.chunk.js","sourcesContent":["// Below we import \"Link\" from react-router-dom to handle routes using Router in React\nimport { Link } from 'react-router-dom';\n\n\nconst Navbar = () => {\n    return (\n        <nav className=\"navbar\">\n            <h1>Spacestagram </h1>\n            <div className=\"links\">\n                {/* Here we use the word \"Link\" instead of \"<a>\" and \"to\" instead of \"href \" */}\n                <Link to =\"/\">Home</Link>\n            </div>\n        </nav>\n     );\n}\n \nexport default Navbar;","import { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst BlogList = ({data, title}) => {\n\n  const [isActive, setActive] = useState(false)\n\n\n  const liked = () => {\n    setActive(!isActive);\n  }\n    console.log(data)\n\n    return (\n      <>\n          <h1>{title}</h1>  \n        <div className=\"blog-list\">\n          <div className=\"blog-preview\">\n            <p>{data.title}</p>\n            <img src={data.url} alt={data.title} />\n            <small>{data.date}</small>\n            <p>{data.description}</p>\n              <div onClick={liked} className={`heart ${isActive ? 'is-active' : null}`}></div>\n          </div>\n            </div>  \n            </> \n     );\n}\n \nexport default BlogList;\n","import { useEffect, useState } from \"react\"\n// Custom hooks have to start with the word use in the name. Example useFetch or useCustomHook\n\n// url is the fetch url endpoint. passing it into the useFetch hook so we can reuse it\nconst useFetch = (url) => {\n\n    /// *************** STATES *************************************\n\n    // create a state for blogs and a function state to update\n    const [data, setData] = useState(null)\n    // create a state for loading and a function state to update\n        const [isLoading, setIsLoading] = useState(true)\n    // create a state for errors and function state to update \n        const [error, setError] = useState(null)\n\n        \n        \n        useEffect(() => {\n            \n        //  ***** Clean Up Function ********\n            // Below, we use the abortcontroller instance to cancel any unwanted requests\n            //  (if a person skips between pages we want to cancel request)\n        const abortCont = new AbortController()\n\n\n        // useSetTimeOut to create a realistic 1 second time delay\n        setTimeout(() =>{\n        // fetch data from json fake db\n\n        // assosiating abort controller with the fetch ** \n        fetch(url, { signal: abortCont.signal })\n                // .then because it's a promise \n            .then(res =>{\n                // check if res status is !NOT OK \n                if(!res.ok) {\n                    throw Error( \"Could not fetch data from that resource\")\n                }\n            // IF OK. change format of the data to json\n                return res.json()\n            })\n            // new promise with the data\n                .then((data) => {\n            // change the state of the blogs with the input of the data\n                    setIsLoading(false)\n                    // pass the data\n                    setData(data)\n                    // there is not a error, change the state of the error\n                    setError(null)\n                })\n            .catch((err) =>{\n                // if abort ERROR caused by us, don't update state\n                if(err.name === \"AbortError\"){\n                    console.log(\"fetch aborted\")\n                } else {\n                    // if error STOP LOADING\n                    setIsLoading(false)\n                    // show loading message\n                    setError(err.message)\n\n                }\n            })\n                // here we pass in the time wanted before executing the code\n        }, 1000)\n\n        // clean up function / abort controller \n        return () => {abortCont.abort()}\n\n    }, [url])\n\n    return {data, isLoading, error}\n}\n\nexport default useFetch;","import BlogList from './BlogList'\nimport useFetch from \"./useFetch\";\n\nconst Home = () => {\n\n    const apiKey = '5gfCoWOBOc7bDK68AoSm1g80uGTheVyqK0t96bv6'\nconst {data, isLoading, error} = useFetch('https://api.nasa.gov/planetary/apod?api_key=' + apiKey)\n\n    \n    return ( \n        <div className=\"home\"> \n            {/* if error is true, show error*/} \n            {error && <div> { error } </div>}\n            {/* If isLoading is true, show loading...  */}\n            {isLoading && <div>Loading...</div>}\n            {/* If there are blogs, show blogList and pass props */}\n            {data && <BlogList data={data} title=\"All Space pics\" /> }\n             {/* <BlogList blogs={blogs.filter((blog) =>  blog.author === 'mario')} */}\n                    \n             {/* title=\"Mario's blogs\"/> */}\n         </div>\n\n     );\n}\n \nexport default Home;","import { Link } from \"react-router-dom\";\n\nconst NotFound = () => {\n    return ( \n        <div>\n            <h1>Page Not Found</h1>\n            <Link to=\"/\">Back to the home page</Link>\n        </div>\n     );\n}\n \nexport default NotFound;","import './App.css';\nimport Navbar from './Navbar';\nimport Home from './Home';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport NotFound from './NotFound'\n// eslint-disable-next-line no-lone-blocks\n{/* curly braces allow react to use dynamic values */}\n\nfunction App() {\n\n\n  return (\n    <Router>\n      <div className=\"App\">\n          <Navbar />\n          <div className=\"content\">\n            <Switch>\n              \n              <Route exact path=\"/\">\n                <Home />\n              </Route>\n             \n              <Route path=\"*\">\n                <NotFound />\n              </Route>\n            </Switch>\n          </div>\n      </div>\n     </Router>\n\n\n\n\n\n\n      //  {/* *****    NOTES  ****** */}\n      // {/* <h1>{title}</h1>\n      //   <p>liked {likes} times</p>\n      // {/* {<p> {person} </p>} */}\n      // {/*    THE ONLY different data types allowed in react       */}\n      // {/* <p>{10}</p> */}\n      // {/* <p>{\"Hello guys\"}</p>  */}\n      // {/* <p>{[1,2,3,4]}</p> */}\n      // {/* <p>{Math.random() * 10}</p> */}\n      // {/* <a href={googleLink}>google link</a>  */} \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n  "],"sourceRoot":""}